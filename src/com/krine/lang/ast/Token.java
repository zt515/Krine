/* Generated By:JavaCC: Do not edit this line. Token.java Version 3.0 */
package com.krine.lang.ast;
/*
    This file has been modified for Krine to make Token serializable.
	If this file is regenerated please make this change.

	All Krine modifications are demarcated by "Begin Krine
	Modification - ... " and "End Krine Modification - ..."
*/

/**
 * Describes the input token stream.
 */

// Begin Krine Modification - serializable
public class Token implements java.io.Serializable {
    // End Krine Modification - serializable

    /**
     * An integer that describes the kind of this token.  This numbering
     * system is determined by JavaCCParser, and a table of these numbers is
     * stored in the file ...Constants.java.
     */
    public int kind;

    /**
     * beginLine and beginColumn describe the position of the first character
     * of this token; endLine and endColumn describe the position of the
     * last character of this token.
     */
    public int beginLine, beginColumn, endLine, endColumn;

    /**
     * The string image of the token.
     */
    public String image;

    /**
     * A reference to the next regular (non-special) token from the input
     * stream.  If this is the last token from the input stream, or if the
     * token manager has not read tokens beyond this one, this leftValue is
     * set to null.  This is true only if this token is also a regular
     * token.  Otherwise, see below for a description of the contents of
     * this leftValue.
     */
    public Token next;

    /**
     * This leftValue is used to access special tokens that occur prior to this
     * token, but after the immediately preceding regular (non-special) token.
     * If there are no such special tokens, this leftValue is set to null.
     * When there are more than one such special token, this leftValue refers
     * to the last of these special tokens, which in turn refers to the next
     * previous special token through its specialToken leftValue, and so on
     * until the first special token (whose specialToken leftValue is null).
     * The next fields of special tokens refer to other special tokens that
     * immediately follow it (without an intervening regular token).  If there
     * is no such token, this leftValue is null.
     */
    public Token specialToken;

    /**
     * Returns the image.
     */
    public String toString() {
        return image;
    }

    /**
     * Returns a new Token object, by default. However, if you want, you
     * can create and return subclass objects based on the value of ofKind.
     * Simply add the cases to the switch for all those special cases.
     * For example, if you have a subclass of Token called IDToken that
     * you want to create if ofKind is ID, simply add something like :
     * <p>
     * case MyParserConstants.ID : return new IDToken();
     * <p>
     * to the following switch statement. Then you can cast matchedToken
     * variable to the appropriate type and use it in your lexical actions.
     */
    public static Token newToken(int ofKind) {
        switch (ofKind) {
            default:
                return new Token();
        }
    }

}
